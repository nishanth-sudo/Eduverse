English
Español
Español – América Latina
Français
Indonesia
Italiano
Polski
Português
Português – Brasil
Tiếng Việt
Türkçe
Русский
עברית
العربيّة
فارسی
हिंदी
বাংলা
ภาษาไทย
中文 – 简体
中文 – 繁體
日本語
한국어
TensorFlow Core
TensorFlowLearnTensorFlow CoreGuideKeras: The high-level API for TensorFlowStay organized with collectionsSave and categorize content based on your preferences.Keras is the high-level API of the TensorFlow platform. It provides an
approachable, highly-productive interface for solving machine learning (ML)
problems, with a focus on modern deep learning. Keras covers every step of the
machine learning workflow, from data processing to hyperparameter tuning to
deployment. It was developed with a focus on enabling fast experimentation.With Keras, you have full access to the scalability and cross-platform
capabilities of TensorFlow. You can run Keras on a TPU Pod or large clusters of
GPUs, and you can export Keras models to run in the browser or on mobile
devices. You can also serve Keras models via a web API.Keras is designed to reduce cognitive load by achieving the following goals:Offer simple, consistent interfaces.Minimize the number of actions required for common use cases.Provide clear, actionable error messages.Follow the principle of progressive disclosure of complexity: It's easy to get
started, and you can complete advanced workflows by learning as you go.Help you write concise, readable code.Who should use KerasThe short answer is that every TensorFlow user should use the Keras APIs by
default. Whether you're an engineer, a researcher, or an ML practitioner, you
should start with Keras.There are a few use cases (for example, building tools on top of TensorFlow or
developing your own high-performance platform) that require the low-levelTensorFlow Core APIs. But if your use
case doesn't fall into one
of theCore API applications,
you should prefer Keras.Keras API componentsThe core data structures of Keras arelayersandmodels. A layer is a simple input/output
transformation, and a model is a directed acyclic graph (DAG) of layers.LayersThetf.keras.layers.Layerclass is the fundamental abstraction in Keras. ALayerencapsulates a state (weights) and some computation (defined in thetf.keras.layers.Layer.callmethod).Weights created by layers can be trainable or non-trainable. Layers are
recursively composable: If you assign a layer instance as an attribute of
another layer, the outer layer will start tracking the weights created by the
inner layer.You can also use layers to handle data preprocessing tasks like normalization
and text vectorization. Preprocessing layers can be included directly into a
model, either during or after training, which makes the model portable.ModelsA model is an object that groups layers together and that can be trained on
data.The simplest type of model is theSequentialmodel,
which is a linear stack of layers. For more complex architectures, you can
either use theKeras functional API,
which lets you build arbitrary graphs of layers, oruse subclassing to write models from scratch.Thetf.keras.Modelclass features built-in training and evaluation methods:tf.keras.Model.fit: Trains the model for a fixed number of epochs.tf.keras.Model.predict: Generates output predictions for the input samples.tf.keras.Model.evaluate: Returns the loss and metrics values for the model;
configured via thetf.keras.Model.compilemethod.These methods give you access to the following built-in training features:Callbacks.
You can leverage built-in callbacks for early stopping, model checkpointing,
andTensorBoardmonitoring. You can
alsoimplement custom callbacks.Distributed training.
You can easily scale up your training to multiple GPUs, TPUs, or devices.Step fusing. With thesteps_per_executionargument intf.keras.Model.compile, you can process multiple batches in a singletf.functioncall, which greatly improves device utilization on TPUs.For a detailed overview of how to usefit, see thetraining and evaluation guide.
To learn how to customize the built-in training and evaluation loops, seeCustomizing what happens infit().Other APIs and toolsKeras provides many other APIs and tools for deep learning, including:OptimizersMetricsLossesData loading utilitiesFor a full list of available APIs, see theKeras API reference. To learn more about other Keras
projects and initiatives, seeThe Keras ecosystem.Next stepsTo get started using Keras with TensorFlow, check out the following topics:The Sequential modelThe Functional APITraining & evaluation with the built-in methodsMaking new layers and models via subclassingSerialization and savingWorking with preprocessing layersCustomizing what happens in fit()Writing a training loop from scratchWorking with RNNsUnderstanding masking & paddingWriting your own callbacksTransfer learning & fine-tuningMulti-GPU and distributed trainingTo learn more about Keras, see the following topics atkeras.io:About KerasIntroduction to Keras for EngineersIntroduction to Keras for ResearchersKeras API referenceThe Keras ecosystem
TensorFlow
Learn
TensorFlow Core
Guide
Keras: The high-level API for TensorFlowStay organized with collectionsSave and categorize content based on your preferences.
Keras is the high-level API of the TensorFlow platform. It provides an
approachable, highly-productive interface for solving machine learning (ML)
problems, with a focus on modern deep learning. Keras covers every step of the
machine learning workflow, from data processing to hyperparameter tuning to
deployment. It was developed with a focus on enabling fast experimentation.
With Keras, you have full access to the scalability and cross-platform
capabilities of TensorFlow. You can run Keras on a TPU Pod or large clusters of
GPUs, and you can export Keras models to run in the browser or on mobile
devices. You can also serve Keras models via a web API.
Keras is designed to reduce cognitive load by achieving the following goals:
Offer simple, consistent interfaces.
Minimize the number of actions required for common use cases.
Provide clear, actionable error messages.
Follow the principle of progressive disclosure of complexity: It's easy to get
started, and you can complete advanced workflows by learning as you go.
Help you write concise, readable code.
Who should use Keras
The short answer is that every TensorFlow user should use the Keras APIs by
default. Whether you're an engineer, a researcher, or an ML practitioner, you
should start with Keras.
There are a few use cases (for example, building tools on top of TensorFlow or
developing your own high-performance platform) that require the low-levelTensorFlow Core APIs. But if your use
case doesn't fall into one
of theCore API applications,
you should prefer Keras.
Keras API components
The core data structures of Keras arelayersandmodels. A layer is a simple input/output
transformation, and a model is a directed acyclic graph (DAG) of layers.
Layers
Thetf.keras.layers.Layerclass is the fundamental abstraction in Keras. ALayerencapsulates a state (weights) and some computation (defined in thetf.keras.layers.Layer.callmethod).
tf.keras.layers.Layer
Layer
tf.keras.layers.Layer.call
Weights created by layers can be trainable or non-trainable. Layers are
recursively composable: If you assign a layer instance as an attribute of
another layer, the outer layer will start tracking the weights created by the
inner layer.
You can also use layers to handle data preprocessing tasks like normalization
and text vectorization. Preprocessing layers can be included directly into a
model, either during or after training, which makes the model portable.
Models
A model is an object that groups layers together and that can be trained on
data.
The simplest type of model is theSequentialmodel,
which is a linear stack of layers. For more complex architectures, you can
either use theKeras functional API,
which lets you build arbitrary graphs of layers, oruse subclassing to write models from scratch.
Sequential
Thetf.keras.Modelclass features built-in training and evaluation methods:
tf.keras.Model
tf.keras.Model.fit: Trains the model for a fixed number of epochs.
tf.keras.Model.fit
tf.keras.Model.predict: Generates output predictions for the input samples.
tf.keras.Model.predict
tf.keras.Model.evaluate: Returns the loss and metrics values for the model;
configured via thetf.keras.Model.compilemethod.
tf.keras.Model.evaluate
tf.keras.Model.compile
These methods give you access to the following built-in training features:
Callbacks.
You can leverage built-in callbacks for early stopping, model checkpointing,
andTensorBoardmonitoring. You can
alsoimplement custom callbacks.
Distributed training.
You can easily scale up your training to multiple GPUs, TPUs, or devices.
Step fusing. With thesteps_per_executionargument intf.keras.Model.compile, you can process multiple batches in a singletf.functioncall, which greatly improves device utilization on TPUs.
steps_per_execution
tf.keras.Model.compile
tf.function
For a detailed overview of how to usefit, see thetraining and evaluation guide.
To learn how to customize the built-in training and evaluation loops, seeCustomizing what happens infit().
fit
fit()
Other APIs and tools
Keras provides many other APIs and tools for deep learning, including:
Optimizers
Metrics
Losses
Data loading utilities
For a full list of available APIs, see theKeras API reference. To learn more about other Keras
projects and initiatives, seeThe Keras ecosystem.
Next steps
To get started using Keras with TensorFlow, check out the following topics:
The Sequential model
The Functional API
Training & evaluation with the built-in methods
Making new layers and models via subclassing
Serialization and saving
Working with preprocessing layers
Customizing what happens in fit()
Writing a training loop from scratch
Working with RNNs
Understanding masking & padding
Writing your own callbacks
Transfer learning & fine-tuning
Multi-GPU and distributed training
To learn more about Keras, see the following topics atkeras.io:
About Keras
Introduction to Keras for Engineers
Introduction to Keras for Researchers
Keras API reference
The Keras ecosystem
Except as otherwise noted, the content of this page is licensed under theCreative Commons Attribution 4.0 License, and code samples are licensed under theApache 2.0 License. For details, see theGoogle Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates.
Last updated 2023-06-08 UTC.