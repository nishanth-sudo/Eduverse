C
C Basics
C Data Types
C Operators
C  Input and Output
C Control Flow
C Functions
C Arrays
C Strings
C Pointers
C Preprocessors
C File Handling
C Programs
C Cheatsheet
C Interview Questions
C MCQ
C++
Explore GfG Courses
Share Your Experiences
C Programming Language Tutorial
C Basics
C Language Introduction
Features of C Programming Language
C Programming Language Standard
C Hello World Program
Compiling a C Program: Behind the Scenes
C Comments
Tokens in C
Keywords in C
C Variables and Constants
C Variables
Constants in C
Const Qualifier in C
Different ways to declare variable as constant in C
Scope rules in C
Internal Linkage and External Linkage in C
Global Variables in C
C Data Types
Data Types in C
Literals in C
Escape Sequence in C
bool in C
Integer Promotions in C
Character Arithmetic in C
Type Conversion in C
C Input/Output
Basic Input and Output in C
Format Specifiers in C
printf in C
scanf in C
Scansets in C
Formatted and Unformatted Input/Output functions in C with Examples
C Operators
Operators in C
Arithmetic Operators in C
Unary Operators in C
Relational Operators in C
Bitwise Operators in C
C Logical Operators
Assignment Operators in C
Increment and Decrement Operators in C
Conditional or Ternary Operator (?:) in C
sizeof operator in C
Operator Precedence and Associativity in C
C Control Statements Decision-Making
Decision Making in C (if , if..else, Nested if, if-else-if )
C - if Statement
C if else Statement
C if else if ladder
Switch Statement in C
Using Range in switch Case in C
C - Loops
C for Loop
while Loop in C
do...while Loop in C
For vs. While
Continue Statement in C
Break Statement in C
goto Statement in C
C Functions
C Functions
User-Defined Function in C
Parameter Passing Techniques in C
Function Prototype in C
How can I return multiple values from a function?
main Function in C
Implicit Return Type int in C
Callbacks in C
Nested Functions in C
Variadic Functions in C
_Noreturn function specifier in C
Predefined Identifier __func__ in C
C Library math.h Functions
C Arrays & Strings
C Arrays
Properties of Array in C
Multidimensional Arrays in C - 2D and 3D Arrays
Initialization of Multidimensional Array in C
Pass Array to Functions in C
How to pass a 2D array as a parameter in C?
What are the data types for which it is not possible to create an array?
How to pass an array by value in C ?
Strings in C
Array of Strings in C
What is the difference between single quoted and double quoted declaration of char array?
C String Functions
C Pointers
C Pointers
Pointer Arithmetics in C with Examples
C - Pointer to Pointer (Double Pointer)
Function Pointer in C
How to Declare a Pointer to a Function?
Pointer to an Array | Array Pointer
Difference between constant pointer, pointers to constant, and constant pointers to constants
Pointer vs Array in C
Dangling, Void , Null and Wild Pointers in C
Near, Far and Huge Pointers in C
restrict Keyword in C
C User-Defined Data Types
C Structures
dot (.) Operator in C
C typedef
Structure Member Alignment, Padding and Data Packing
Flexible Array Members in a structure in C
C Unions
Bit Fields in C
Difference Between Structure and Union in C
Anonymous Union and Structure in C
Enumeration (or enum) in C
C Storage Classes
Storage Classes in C
extern Keyword in C
Static Variables in C
Initialization of Static Variables in C
Static Functions in C
Understanding "volatile" qualifier in C | Set 2 (Examples)
Understanding "register" keyword in C
C Memory Management
Memory Layout of C Programs
Dynamic Memory Allocation in C using malloc(), calloc(), free() and realloc()
Difference Between malloc() and calloc() with Examples
What is Memory Leak?  How can we avoid?
Dynamic Array in C
How to dynamically allocate a 2D array in C?
Dynamically Growing Array in C
C Preprocessor
C Preprocessors
C Preprocessor Directives
How a Preprocessor works in C?
Header Files in C
Whatâ€™s difference between header files "stdio.h" and "stdlib.h" ?
How to write your own header file in C?
Macros and its types in C
Interesting Facts about Macros and Preprocessors in C
# and ## Operators in C
How to print a variable name in C?
Multiline macros in C
Variable length arguments for Macros
Branch prediction macros in GCC
Difference between typedef and #define in C
Difference between #define and const in C
C File Handling
Basics of File Handling in C
C fopen() Function
EOF, getc() and feof() in C
fgets() in C
fseek() vs rewind() in C
What is return type of getchar(), fgetc() and getc() ?
Read/Write Structure From/to a File in C
C Program to Print Contents of File
C Program to Delete a File
C Program to Merge Contents of Two Files into a Third File
What is the difference between printf, sprintf and fprintf?
Difference between  getc(), getchar(), getch() and getche()
Miscellaneous
time.h header file in C with Examples
Input-output system calls in C | Create, Open, Close, Read, Write
Signals in C language
Program error signals
Socket Programming in C
_Generics Keyword in C
Multithreading in C
C Interview Questions
C Programming Interview Questions (2025)
Commonly Asked C Programming Interview Questions | Set 1
Commonly Asked C Programming Interview Questions | Set 2
Commonly Asked C Programming Interview Questions | Set 3
Top 50 C Coding Interview Questions and Answers (2025)
DSA to DevelopmentCourse
C Programming Language TutorialLast Updated :22 May, 2025CommentsImproveSuggest changesLike ArticleLikeReportC is a general-purpose mid-level programming language developed by Dennis M. Ritchie at Bell Laboratories in 1972. It was initially used for the development of UNIX operating system, but it later became popular for a wide range of applications. Today, C remains one of the top three most widely used programming languages.Why learn C?C is considered as the fundamental language of computer programming. Many modern languages such as C++, Java, Python, and Go derive their syntax from C. So, if you learn C, not only you will have strong grasp of fundamental concepts but also find it easier to learn other programming languages.Also, C is used in creating almost all of the operating systems and embedded systems. So, if you have interest in low level coding, learning C is mandatory.C FundamentalsThis section of the C Tutorial includes basic concepts that build the foundation for writing C programs. It teaches you how to store and output data, perform arithmetic and other operations, control the program flow, etc.C IntroductionCompilation ProcessIdentifiersC KeywordsC VariablesData Type in CQuiz:C Basics|Variables|Data TypesInput and Output in COperatorsQuiz:Input and Output|OperatorsConditional StatementsLoopsQuiz:Conditional Statements and LoopsC FunctionsFunctionsare block of code that performs a specific task. They allow programmers to write modular and reusable code.Functions in CParameter Passing TechniquesMain FunctionRecursionInline FunctionNested FunctionsQuiz:FunctionsCompound Data Types in CCompound data types are created from primitive data types and provides a different way to use them according to our needs. This section of C tutorial teaches you about the compound data types and how to efficiently organize and process real world data.C ArraysPointer in CC StringsQuiz:Array|Pointers|StringsStructuresUnionsEnumeration (or enum)Quiz:Structure & UnionMemory Management in CThis section covers the manual memory management in C using pointers. The dynamic memory management in C uses functions like malloc(), calloc(), realloc(), and free() to manually manage the memory while avoiding errors such as memory leak.Program's Memory LayoutDynamic Memory AllocationMemory LeaksQuiz:Memory ManagementFile Handling in CThis section teaches you how to work with files in C, including creating, reading, writing, manipulating and deleting files.Basics of File HandlingRead a FileRead/Write Structure From/to a FileEOF, getc() and feof()Delete a FileQuiz:File HandlingC Error HandlingUnlike other programming languages that have automatic error handling, In C language error handling is to be manually done by the developers using error-handling methods, debugging strategies, and functions like perror(), strerror(), etc.Error Handling in CException Handling Using gotoFile Error HandlingDivide by Zero ExceptionMiscellaneous C ConceptsThis section explores various essential of C language that do not fit into a single category but play a vital role in C programming and provide advanced functionality to your program.C PreprocessorsMacrosQuiz:Preprocessors and MacrosC Header FilesDate and TimeLinkageStorage ClassesQuiz:Storage ClassesAdvanced CThis section teaches you high-level C programming techniques such as multi-threading, signal handling, socket programming, etc which are used in creating high-performance robust applications and systems.Variadic FunctionsInput-Output System CallsSignalsSocket Programming_Generics KeywordMultithreading in CC vs Other Programming LanguagesLet's see where C language stands as compared to other popular programming languages:FeatureCC++JavaPythonTypeCompiledCompiledCompiled and InterpretedInterpretedParadigmProcedural, structuredMulti-paradigm (procedural, object-oriented, generic)Object-oriented, structuredMulti-paradigm (object-oriented, procedural, functional)Memory ManagementManualManualAutomaticAutomaticError HandlingNo built-in exceptions, manual checksSupports Exceptions HandlingBuilt-in exception handling (try-catch)Built-in exception handling (try-except)Object-Oriented SupportDoesn't Support OOPSupport OOPsSupport OOPsSupport OOPsUse CasesSystem programming, embedded systems, game developmentSystem programming, game development, high-performance applicationsLarge-scale applications, enterprise softwareWeb development, data analysis, machine learningThe below image compares the basic code structure of these 4 programming languages by writing the same Hello World program.Hello World Program for Different Programming LanguagesWhat's Next?Now that you have a strong foundation in C language, you can explore more advanced topics such as Data structures and Algorithms in C. Keep challenging yourself with our collection of practice problems to further strengthen you understanding of the language:Fundamental Practice ProblemsFunctions Practice ProblemsCompound Data Types Practice ProblemsYou can explore advanced topics such asData structures and Algorithms in Cto solve complex problems and you can also contribute to open-source projects, or even start preparing for competitive programming contests to and gain some hands-on experience.Job Roles for C ProgrammersC is worth learning in 2025 as it is still used for system programming, embedded systems, operating systems, game engines, networking, and high-performance computing. C programmers can work in roles such as:Embedded Systems Engineer:Engineers who develop embedded systems, that mainly concern on hardware and software integration for devices like IoT.Firmware Engineer:Create firmware for hardware devices to control their functionality and ensure proper operation of embedded systems.System Programmer:People who work on system-level software like operating systems, device drivers.Game Developer: Designs and creates video games ensuring smooth gameplay across platforms.Network Engineer: Configure create and manage computer networks (like LANs, WANs) to ensure efficient and secure communication across the network.You can use our list of carefully selected interview questions based on C programming to prepare for your technical interviews:Top 50 C Programming Interview Questions and AnswersCommonly Asked C Programming Interview Questions | Set 1Commonly Asked C Programming Interview Questions | Set 2Commonly Asked C Programming Interview Questions | Set 3Next ArticleC Language IntroductionkartikImproveArticle Tags :C LanguageTutorials
C Programming Language Tutorial
C is a general-purpose mid-level programming language developed by Dennis M. Ritchie at Bell Laboratories in 1972. It was initially used for the development of UNIX operating system, but it later became popular for a wide range of applications. Today, C remains one of the top three most widely used programming languages.
Why learn C?
C is considered as the fundamental language of computer programming. Many modern languages such as C++, Java, Python, and Go derive their syntax from C. So, if you learn C, not only you will have strong grasp of fundamental concepts but also find it easier to learn other programming languages.
Also, C is used in creating almost all of the operating systems and embedded systems. So, if you have interest in low level coding, learning C is mandatory.
C Fundamentals
This section of the C Tutorial includes basic concepts that build the foundation for writing C programs. It teaches you how to store and output data, perform arithmetic and other operations, control the program flow, etc.
C Introduction
Compilation Process
Identifiers
C Keywords
C Variables
Data Type in C
Quiz:C Basics|Variables|Data Types
Input and Output in C
Operators
Quiz:Input and Output|Operators
Conditional Statements
Loops
Quiz:Conditional Statements and Loops
C Functions
Functionsare block of code that performs a specific task. They allow programmers to write modular and reusable code.
Functions in C
Parameter Passing Techniques
Main Function
Recursion
Inline Function
Nested Functions
Quiz:Functions
Compound Data Types in C
Compound data types are created from primitive data types and provides a different way to use them according to our needs. This section of C tutorial teaches you about the compound data types and how to efficiently organize and process real world data.
C Arrays
Pointer in C
C Strings
Quiz:Array|Pointers|Strings
Structures
Unions
Enumeration (or enum)
Quiz:Structure & Union
Memory Management in C
This section covers the manual memory management in C using pointers. The dynamic memory management in C uses functions like malloc(), calloc(), realloc(), and free() to manually manage the memory while avoiding errors such as memory leak.
Program's Memory Layout
Dynamic Memory Allocation
Memory Leaks
Quiz:Memory Management
File Handling in C
This section teaches you how to work with files in C, including creating, reading, writing, manipulating and deleting files.
Basics of File Handling
Read a File
Read/Write Structure From/to a File
EOF, getc() and feof()
Delete a File
Quiz:File Handling
C Error Handling
Unlike other programming languages that have automatic error handling, In C language error handling is to be manually done by the developers using error-handling methods, debugging strategies, and functions like perror(), strerror(), etc.
Error Handling in C
Exception Handling Using goto
File Error Handling
Divide by Zero Exception
Miscellaneous C Concepts
This section explores various essential of C language that do not fit into a single category but play a vital role in C programming and provide advanced functionality to your program.
C Preprocessors
Macros
Quiz:Preprocessors and Macros
C Header Files
Date and Time
Linkage
Storage Classes
Quiz:Storage Classes
Advanced C
This section teaches you high-level C programming techniques such as multi-threading, signal handling, socket programming, etc which are used in creating high-performance robust applications and systems.
Variadic Functions
Input-Output System Calls
Signals
Socket Programming
_Generics Keyword
Multithreading in C
C vs Other Programming Languages
Let's see where C language stands as compared to other popular programming languages:
Feature
C
C
C++
Java
Python
Type
Compiled
Compiled
Compiled and Interpreted
Interpreted
Paradigm
Procedural, structured
Multi-paradigm (procedural, object-oriented, generic)
Object-oriented, structured
Multi-paradigm (object-oriented, procedural, functional)
Memory Management
Manual
Manual
Automatic
Automatic
Error Handling
Error Handling
No built-in exceptions, manual checks
No built-in exceptions, manual checks
Supports Exceptions Handling
Supports Exceptions Handling
Built-in exception handling (try-catch)
Built-in exception handling (try-catch)
Built-in exception handling (try-except)
Built-in exception handling (try-except)
Object-Oriented Support
Object-Oriented Support
Doesn't Support OOP
Doesn't Support OOP
Support OOPs
Support OOPs
Support OOPs
Support OOPs
Support OOPs
Support OOPs
Use Cases
System programming, embedded systems, game development
System programming, game development, high-performance applications
Large-scale applications, enterprise software
Web development, data analysis, machine learning
The below image compares the basic code structure of these 4 programming languages by writing the same Hello World program.
What's Next?
Now that you have a strong foundation in C language, you can explore more advanced topics such as Data structures and Algorithms in C. Keep challenging yourself with our collection of practice problems to further strengthen you understanding of the language:
Fundamental Practice Problems
Functions Practice Problems
Compound Data Types Practice Problems
You can explore advanced topics such asData structures and Algorithms in Cto solve complex problems and you can also contribute to open-source projects, or even start preparing for competitive programming contests to and gain some hands-on experience.
Job Roles for C Programmers
C is worth learning in 2025 as it is still used for system programming, embedded systems, operating systems, game engines, networking, and high-performance computing. C programmers can work in roles such as:
Embedded Systems Engineer:Engineers who develop embedded systems, that mainly concern on hardware and software integration for devices like IoT.
Firmware Engineer:Create firmware for hardware devices to control their functionality and ensure proper operation of embedded systems.
System Programmer:People who work on system-level software like operating systems, device drivers.
Game Developer: Designs and creates video games ensuring smooth gameplay across platforms.
Network Engineer: Configure create and manage computer networks (like LANs, WANs) to ensure efficient and secure communication across the network.
You can use our list of carefully selected interview questions based on C programming to prepare for your technical interviews:
Top 50 C Programming Interview Questions and Answers
Commonly Asked C Programming Interview Questions | Set 1
Commonly Asked C Programming Interview Questions | Set 2
Commonly Asked C Programming Interview Questions | Set 3
C Language
Tutorials
Similar Reads
Thank You!
What kind of Experience do you want to share?

[Images saved with this article:]
media.geeksforgeeks.org_wp-content_uploads_20250509174024430613_codes.webp
media.geeksforgeeks.org_img-practice_prod_courses_287_Web_Content_c_1722949071.webp
media.geeksforgeeks.org_img-practice_prod_courses_198_Web_Content_dsa_1723009292.webp
media.geeksforgeeks.org_img-practice_prod_courses_451_Web_Content_cp_1723008864.webp
media.geeksforgeeks.org_auth-dashboard-uploads_suggestChangeIcon.png
media.geeksforgeeks.org_auth-dashboard-uploads_createImprovementIcon.png