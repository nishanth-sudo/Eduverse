Python - Home
Python - Overview
Python - History
Python - Features
Python vs C++
Python - Hello World Program
Python - Application Areas
Python - Interpreter
Python - Environment Setup
Python - Virtual Environment
Python - Basic Syntax
Python - Variables
Python - Data Types
Python - Type Casting
Python - Unicode System
Python - Literals
Python - Operators
Python - Arithmetic Operators
Python - Comparison Operators
Python - Assignment Operators
Python - Logical Operators
Python - Bitwise Operators
Python - Membership Operators
Python - Identity Operators
Python - Operator Precedence
Python - Comments
Python - User Input
Python - Numbers
Python - Booleans
Python - Control Flow
Python - Decision Making
Python - If Statement
Python - If else
Python - Nested If
Python - Match-Case Statement
Python - Loops
Python - for Loops
Python - for-else Loops
Python - While Loops
Python - break Statement
Python - continue Statement
Python - pass Statement
Python - Nested Loops
Python Functions & Modules
Python - Functions
Python - Default Arguments
Python - Keyword Arguments
Python - Keyword-Only Arguments
Python - Positional Arguments
Python - Positional-Only Arguments
Python - Arbitrary Arguments
Python - Variables Scope
Python - Function Annotations
Python - Modules
Python - Built in Functions
Python Strings
Python - Strings
Python - Slicing Strings
Python - Modify Strings
Python - String Concatenation
Python - String Formatting
Python - Escape Characters
Python - String Methods
Python - String Exercises
Python Lists
Python - Lists
Python - Access List Items
Python - Change List Items
Python - Add List Items
Python - Remove List Items
Python - Loop Lists
Python - List Comprehension
Python - Sort Lists
Python - Copy Lists
Python - Join Lists
Python - List Methods
Python - List Exercises
Python Tuples
Python - Tuples
Python - Access Tuple Items
Python - Update Tuples
Python - Unpack Tuples
Python - Loop Tuples
Python - Join Tuples
Python - Tuple Methods
Python - Tuple Exercises
Python Sets
Python - Sets
Python - Access Set Items
Python - Add Set Items
Python - Remove Set Items
Python - Loop Sets
Python - Join Sets
Python - Copy Sets
Python - Set Operators
Python - Set Methods
Python - Set Exercises
Python Dictionaries
Python - Dictionaries
Python - Access Dictionary Items
Python - Change Dictionary Items
Python - Add Dictionary Items
Python - Remove Dictionary Items
Python - Dictionary View Objects
Python - Loop Dictionaries
Python - Copy Dictionaries
Python - Nested Dictionaries
Python - Dictionary Methods
Python - Dictionary Exercises
Python Arrays
Python - Arrays
Python - Access Array Items
Python - Add Array Items
Python - Remove Array Items
Python - Loop Arrays
Python - Copy Arrays
Python - Reverse Arrays
Python - Sort Arrays
Python - Join Arrays
Python - Array Methods
Python - Array Exercises
Python File Handling
Python - File Handling
Python - Write to File
Python - Read Files
Python - Renaming and Deleting Files
Python - Directories
Python - File Methods
Python - OS File/Directory Methods
Python - OS Path Methods
Object Oriented Programming
Python - OOPs Concepts
Python - Classes & Objects
Python - Class Attributes
Python - Class Methods
Python - Static Methods
Python - Constructors
Python - Access Modifiers
Python - Inheritance
Python - Polymorphism
Python - Method Overriding
Python - Method Overloading
Python - Dynamic Binding
Python - Dynamic Typing
Python - Abstraction
Python - Encapsulation
Python - Interfaces
Python - Packages
Python - Inner Classes
Python - Anonymous Class and Objects
Python - Singleton Class
Python - Wrapper Classes
Python - Enums
Python - Reflection
Python Errors & Exceptions
Python - Syntax Errors
Python - Exceptions
Python - try-except Block
Python - try-finally Block
Python - Raising Exceptions
Python - Exception Chaining
Python - Nested try Block
Python - User-defined Exception
Python - Logging
Python - Assertions
Python - Built-in Exceptions
Python Multithreading
Python - Multithreading
Python - Thread Life Cycle
Python - Creating a Thread
Python - Starting a Thread
Python - Joining Threads
Python - Naming Thread
Python - Thread Scheduling
Python - Thread Pools
Python - Main Thread
Python - Thread Priority
Python - Daemon Threads
Python - Synchronizing Threads
Python Synchronization
Python - Inter-thread Communication
Python - Thread Deadlock
Python - Interrupting a Thread
Python Networking
Python - Networking
Python - Socket Programming
Python - URL Processing
Python - Generics
Python Libraries
NumPy Tutorial
Pandas Tutorial
SciPy Tutorial
Matplotlib Tutorial
Django Tutorial
OpenCV Tutorial
Python Miscellenous
Python - Date & Time
Python - Maths
Python - Iterators
Python - Generators
Python - Closures
Python - Decorators
Python - Recursion
Python - Reg Expressions
Python - PIP
Python - Database Access
Python - Weak References
Python - Serialization
Python - Templating
Python - Output Formatting
Python - Performance Measurement
Python - Data Compression
Python - CGI Programming
Python - XML Processing
Python - GUI Programming
Python - Command-Line Arguments
Python - Docstrings
Python - JSON
Python - Sending Email
Python - Further Extensions
Python - Tools/Utilities
Python - GUIs
Python Advanced Concepts
Python - Abstract Base Classes
Python - Custom Exceptions
Python - Higher Order Functions
Python - Object Internals
Python - Memory Management
Python - Metaclasses
Python - Metaprogramming with Metaclasses
Python - Mocking and Stubbing
Python - Monkey Patching
Python - Signal Handling
Python - Type Hints
Python - Automation Tutorial
Python - Humanize Package
Python - Context Managers
Python - Coroutines
Python - Descriptors
Python - Diagnosing and Fixing Memory Leaks
Python - Immutable Data Structures
Python Useful Resources
Python - Questions & Answers
Python - Interview Questions & Answers
Python - Online Quiz
Python - Quick Guide
Python - Reference
Python - Cheatsheet
Python - Projects
Python - Useful Resources
Python - Discussion
Python Compiler
NumPy Compiler
Matplotlib Compiler
SciPy Compiler
Selected Reading
UPSC IAS Exams Notes
Developer's Best Practices
Questions and Answers
Effective Resume Writing
AI Based Resume Builder
Personal AI Study Assistant
Generate Coding Logic
HR Interview Questions
Computer Glossary
Who is Who
Python Tutorial
Python Introduction
What is Python
Python "Hello, World!"
Python Compiler
Python Characteristics
Applications of Python
Features of Python
Python Database Handling
Python Reference
Python Practice
Python Exercises
Python Jobs
Why to Learn Python
Careers with Python
Download Python
Python UpdatesPython AudiencesPython PrerequisitesPython Questions & Answers
Python Audiences
Python Prerequisites
Python Questions & Answers
Python Tutorial
Today, Python is one of the most popular programming languages. Although it is a general-purpose language, it is used in various areas of applications such as Machine Learning, Artificial Intelligence, web development, IoT, and more.
This Python tutorial has been written for the beginners to help them understand the basic to advanced concepts of Python Programming Language. After completing this tutorial, you will find yourself at a great level of expertise in Python, from where you can take yourself to the next levels to become a world class Software Engineer.
What is Python?
Pythonis a very popular general-purpose interpreted, interactive, object-oriented, and high-level programming language. Python is dynamically-typed and garbage-collected programming language. It was created by Guido van Rossum during 1985- 1990. Like Perl, Python source code is also available under the GNU General Public License (GPL).
This Python tutorial gives a complete understanding of Python programming language, starting from basic concepts to advanced concepts. This tutorial will take you through simple and practical approaches while learning Python Programming language.
Python "Hello, World!"
To start with Python programming, the very basic program is toprint "Hello, World!"You can use theprint() function. Below is an example of Python code to print "Hello, World!" −
# Python code to print "Hello, World!"
print ("Hello, World!")
Python Online Compiler
Our Python programming tutorial provides various examples to explain different concepts. We have providedOnline Python Compiler/Interpreter. You can Edit and Execute almost all the examples directly from your browser without the need to set up your development environment.
Try to click the iconto run the following Python code to print conventional "Hello, World!".
# This is my first Python program.
# This will print 'Hello, World!' as the output

print ("Hello, World!");
Characteristics of Python
Following are important characteristics ofPython Programming−
It supports functional and structured programming methods as well asOOP.
It can be used as a scripting language or can be compiled to byte-code for building large applications.
It provides very high-level dynamic data types and supports dynamic type checking.
It supports automatic garbage collection.
It can be easily integrated with C, C++, COM, ActiveX, CORBA, and Java.
Applications of Python
Python is a general purpose programming language known for its readability. It is widely applied in various fields.
InData Science, Python libraries likeNumpy,Pandas, andMatplotlibare used for data analysis and visualization.
Python frameworks likeDjango, andPyramid,  make the development and deployment of Web Applications easy.
This programming language also extends its applications tocomputer visionand image processing.
It is also favored in many tasks likeAutomation, Job Scheduling,GUI development, etc.
Features of Python
The latest release of Python is 3.x. As mentioned before, Python is one of the most widely used languages on the web. I'm going to list a few of them here:
Easy-to-learn− Python has few keywords, simple structure, and a clearly defined syntax. This allows the student to pick up the language quickly.
Easy-to-read− Python code is more clearly defined and visible to the eyes.
Easy-to-maintain− Python's source code is fairly easy-to-maintain.
A broad standard library− Python's bulk of the library is very portable and cross-platform compatible on UNIX, Windows, and Macintosh.
Interactive Mode− Python has support for an interactive mode that allows interactive testing and debugging of snippets of code.
Portable− Python can run on a wide variety of hardware platforms and has the same interface on all platforms.
Extendable− You can add low-level modules to thePython interpreter. These modules enable programmers to add to or customize their tools to be more efficient.
Databases− Python provides interfaces to all major commercial databases.
GUI Programming− Python supports GUI applications that can be created and ported to many system calls, libraries, and Windows systems, such as Windows MFC, Macintosh, and the X Window system of Unix.
Scalable− Python provides a better structure and support for large programs than shell scripting.
Python Database Handling
The following tutorials will help you learn how to work with different databases using Python programming:
Python MongoDB Tutorial
Python MySQL Tutorial
Python PostgreSQL Tutorial
Python SQLite Tutorial
Python Reference
The complete function and method references −
Python Complete Reference
Python Built-in Functions Reference
Python Modules Reference
Python Keywords Reference
Python Cheatsheet
Python Practice
Practice Python from the below-given links:
Python Quick Guide
Python Online Quiz
Python Interview Questions & Answers
Python Exercises
You can practice various Python topics with the help of examples provided:
String Exercises
List Exercises
Tuple Exercises
Set Exercises
Dictionary Exercises
Array Exercises
Python Jobs
Today, Python is very high in demand, and all the major companies are looking for great Python programmers to develop websites, software components, and applications or to work with data science, AI, and ML technologies. When we are developing this tutorial in 2022, there is a high shortage of Python programmers, where the market demands a greater number of Python programmers due to its applications in machine learning, artificial intelligence, etc.
Today, a Python programmer with 3-5 years of experience is asking for around $150,000 in an in an annual package, and this is the most demanding programming language in America. Though it can vary depending on the location of the job. It's impossible to list all of the companies using Python, to name a few big companies are:
Google
Intel
NASA
PayPal
Facebook
IBM
Amazon
Netflix
Pinterest
Uber
Many more...
So, you could be the next potential employee for any of these major companies. We have developed great learning material for you to learn Python programming, which will help you prepare for the technical interviews and certification exams based on Python. So, start learning Python using this simple and effective tutorial from anywhere and anytime, absolutely at your pace.
Why to Learn Python?
Python is consistently rated as one of the world's most popular programming languages. Python is fairly easy to learn, so if you are starting to learn any programming language, then Python could be your great choice. Today, various schools, colleges, and universities are teaching Python as their primary programming language. There are many other good reasons that make Python the top choice of any programmer:
Python is open source, which means it's available free of cost.
Python is simple and so easy to learn.
Python is versatile and can be used to create many different things.
Python has powerful development libraries, including AI, ML, etc.
Python is much in demand and ensures a high salary.
Pythonis a MUST for students and working professionals to become great software engineers, especially when they are working in the web development domain. I will list down some of the key advantages of learning Python:
Python is Interpreted− Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP.
Python is Interactive− You can actually sit at a Python prompt and interact with the interpreter directly to write your programs.
Python is Object-Oriented− Python supports Object-Oriented style or technique of programming that encapsulates code within objects.
Python is a Beginner's Language− Python is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games.
Careers with Python
If you know Python nicely, then you have a great career ahead. Here are just a few of the career options where Python is a key skill:
Game developer
Web designer
Python developer
Full-stack developer
Machine learning engineer
Data scientist
Data analyst
Data engineer
DevOps engineer
Software engineer
Many more other roles
Download Python
You can download Python from its official website:https://www.python.org/downloads/
Python Updates & New Features
The current stable version of Python is 3.13, which was released on October 7, 2024. Python 3.14 is still in the development phase with many new features and changes:
PEP 649: Deferred evaluation of annotations.
PEP 741: Python configuration C API.
PEP 761: Sigstore replaces PGP signatures for verification.
Improved error messages.
Target Audience: Who Can Learn Python?
This tutorial has been prepared for the beginners to help them understand the basics to advanced concepts of Python programming language. After completing this tutorial, you will find yourself at a great level of expertise in Python programming, from where you can take yourself to the next levels.
Prerequisites to Learn Python
Although it is a beginners tutorial, we assume that the readers have a reasonable exposure to any programming environment and knowledge of basic concepts such as variables, commands, syntax, etc.
Python  Questions & Answers
You can explore a set of Python Questions and Answers atPython Questions & Answers

[Images saved with this article:]
www.tutorialspoint.com_images_run-button.png